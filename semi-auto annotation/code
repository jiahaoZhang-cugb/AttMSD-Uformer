import cv2
import numpy as np
import json
import os
from PIL import Image
import base64
from io import BytesIO

img_path = ""
save_dir = ""
os.makedirs(save_dir, exist_ok=True)
save_path = os.path.join(save_dir, "")

threshold_value = 60         
min_area = 120               
approx_ratio = 0.02           
max_points = 15              
use_convex_hull = False       

def encode_image_base64(image_path):
    img = Image.open(image_path).convert("RGB")
    buffer = BytesIO()
    img.save(buffer, format="JPEG")
    return base64.b64encode(buffer.getvalue()).decode()

image = cv2.imread(img_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
_, binary = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY_INV)

contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

json_dict = {
    "version": "5.0.1",
    "flags": {},
    "shapes": [],
    "imagePath": os.path.basename(img_path),
    "imageData": encode_image_base64(img_path),
    "imageHeight": image.shape[0],
    "imageWidth": image.shape[1],
}

def downsample_points(pts, k):
    if len(pts) <= k:
        return pts
    idx = np.linspace(0, len(pts) - 1, num=k, dtype=int)
    return [pts[i] for i in idx]


for cnt in contours:
    area = cv2.contourArea(cnt)
    if area < min_area:
        continue


    if use_convex_hull:
        cnt = cv2.convexHull(cnt)

    eps = approx_ratio * cv2.arcLength(cnt, True)
    approx = cv2.approxPolyDP(cnt, eps, True)  # True 表闭合
    pts = approx.reshape(-1, 2).tolist()


    pts = downsample_points(pts, max_points)


    if len(pts) < 3:
        continue

    json_dict["shapes"].append({
        "label": "mineral",
        "points": pts,
        "group_id": None,
        "shape_type": "polygon",
        "flags": {}
    })


with open(save_path, "w") as f:
    json.dump(json_dict, f, indent=2)

print(f"done， {save_path}")
